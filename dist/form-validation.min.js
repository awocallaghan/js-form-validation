/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Form validation plugin
 * @author Alex O'Callaghan <awocallaghan@gmail.com>
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

global.FormValidation = FormValidation;

var FormValidation = function FormValidation(formElements) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof formElements === 'string') {
    formElements = document.querySelectorAll(formElements);
  }

  if (formElements.constructor !== NodeList) {
    return console.error('Expected a list of DOM elements');
  }

  formElements.forEach(function (form) {
    return initFormValidation(form, options);
  });
};

var initFormValidation = function initFormValidation(form, options) {
  // Ensure form is a HTMLFormElement
  if (form.constructor !== HTMLFormElement) {
    return console.error('Expected HTMLFormElement', form);
  }

  // Give the form a random id if it doesn't have one
  // - We use this to query the form's children
  // - eg. #f10 .error to get child .error div
  if (!form.id) {
    form.id = 'f' + Math.round(Math.random() * 20 + 1);
  }

  form.addEventListener('submit', function (event) {
    var errors = [];
    for (var i = 0; i < event.target.elements.length; i++) {
      var inputElement = event.target.elements[i];
      // Check each child element with a "name" attribute
      if (!inputElement.hasAttribute('name')) {
        continue;
      }

      // Check value is valid for this input
      var inputName = inputElement.getAttribute('name');
      if (options.validators && options.validators[inputName]) {
        var inputVal = inputElement.value;
        var valid = options.validators[inputName](inputVal);
        // Should return true, if not the return is an error message
        if (!(typeof valid === 'undefined' ? 'undefined' : _typeof(valid)) === 'boolean' || valid !== true) {
          // Add red error outline
          inputElement.classList.add('hasError');
          // Push this error message to array of errors
          errors.push(valid);
        } else {
          console.log(inputElement);
          // Remove outline if valid
          inputElement.classList.remove('hasError');
        }
      }
    }

    var errorElement = document.querySelector('#' + form.id + ' .error');
    if (errors.length > 0) {
      event.preventDefault();
      if (errorElement) {
        // Create list of error messages
        var errorList = errors.map(function (error) {
          return '<li>' + error + '</li>';
        });
        errorElement.innerHTML = '<ul>' + errorList + '</ul>';
        // Show error div
        errorElement.style.display = 'block';
      }
    } else {
      // Hide error div if no errors
      errorElement.style.display = 'none';
    }
  });
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ })
/******/ ]);